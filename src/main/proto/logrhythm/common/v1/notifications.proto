syntax = "proto3";

package logrhythm.common.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "com.logrhythm.core.api.v1.grpc";

message Identifier {
    // Required. Represents the organization/individual holding the LogRhythm subscription, e.g.,
    // NASA. A tenant could have multiple users (human or machine) using a LogRhythm product.
    // TODO: correct this field once we finalize proto standards (US8154)
    string tenantId = 1;

    // Required. Represents a user (human or machine) associated with a tenant.
    string id = 2;
}

message UnaryResponseHeader {
    // Required. Uniquely identifies a request so that it can be traced.
    // TODO: correct this field once we finalize proto standards (US8154)
    string requestId = 1;
}

service NotificationService {
    rpc CreateNotice (Notice) returns (UnaryNoticeResponse) {}
    rpc GetNotice (logrhythm.common.v1.Identifier) returns (UnaryNoticeResponse) {}
}

message UnaryNoticeResponse {
    logrhythm.common.v1.UnaryResponseHeader info = 1;
    Notice notice = 2;
}

enum ChannelType {
  CHANNEL_TYPE_UNSPECIFIED = 0;
  CHANNEL_TYPE_EMAIL = 1;
  CHANNEL_TYPE_SMS = 2;
  CHANNEL_TYPE_SLACK = 3;
  CHANNEL_TYPE_PAGER_DUTY = 4;
}

message Notice {
    logrhythm.common.v1.Identifier identifier = 1;  // omitted for CreateNotice

    string category = 2;
    string subcategory = 3;
    string service_name = 4;

    int32 risk_based_priority = 5;

    // if one or more Audience are present, overrides category/subcategory routing.
    Audience audience = 6;

    ChannelType channel = 7; // optional

    NoticeStatus notice_status = 8; // omitted for CreateNotice

    // notification payload (template values)
    map<string,string> template_properties = 9;
}

message NoticeStatus {
    enum ProcessingState {
        UNSPECIFIED = 0;
        RECEIVED = 1;
        PROCESSING = 2;
        COMPLETE_SUCCESS = 3;  // All messages processed and successfully sent
        COMPLETE_FAIL = 4;  // All messages processed, not all successfully sent
    }
    ProcessingState processing_state = 1;
    repeated Notification notifications = 2;
}

message Notification {
    logrhythm.common.v1.Identifier identifier = 1;

    enum ProcessingState {
        UNSPECIFIED = 0;
        PROCESSING = 1;
        RETRY = 2;
        SENT = 3;
        FAILED = 4;
    }
    ProcessingState processing_state = 2;
    string channel = 3;
    string destination = 4;
    string status_message = 5;
    map<string,string> template_properties = 6;

}

message Audience {
    repeated EmailAudience email = 1;
    repeated SlackAudience slack = 2;
    repeated SmsAudience sms = 3;
    repeated UserAudience user = 4;
}

message EmailAudience {
    string address = 1;
    string name = 2;
}

message UserAudience {
    string user_id = 1;
}

message SlackAudience {
    string slack_channel = 1;
}

message SmsAudience {
    string code = 1;
}
